{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["secondsToTime","s","minutes","Math","floor","seconds","toString","TimerControl","props","label","length","increment","decrement","time","setState","className","id","onClick","e","Timer","useState","setTime","workLength","setWorkLength","breakLength","setBreakLength","sessionType","setSessionType","timerInterval","useRef","audioBeep","useEffect","current","play","targetID","currentTarget","clearInterval","setInterval","pause","currentTime","preload","ref","src","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83e969c1.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { FaPause, FaPlay, FaSyncAlt, FaArrowDown, FaArrowUp } from 'react-icons/fa';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <Timer />\n    </div>\n  );\n}\n\nfunction secondsToTime(s) {\n  let minutes = Math.floor(s / 60);\n  let seconds = s % 60;\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  } else {\n    minutes = minutes.toString();\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  } else {\n    seconds = seconds.toString();\n  }\n  return minutes + \":\" + seconds;\n}\n\nfunction TimerControl(props) {\n  let { label, length, increment, decrement, time, setState } = props;\n  return (\n    <>\n      <div className=\"vert\">\n        <p id={label}>\n          {label === \"break-label\" && \"Break\"}\n          {label === \"session-label\" && \"Session\"}\n        </p>\n        <div className=\"horiz\">\n          <button id={decrement} onClick={(e) => setState(e)}>\n            <FaArrowDown />\n          </button>\n          <p id={length}>{time}</p>\n          <button id={increment} onClick={(e) => setState(e)}>\n            <FaArrowUp />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction Timer() {\n  let [time, setTime] = useState(1500);\n  let [workLength, setWorkLength] = useState(25);\n  let [breakLength, setBreakLength] = useState(5);\n  let [sessionType, setSessionType] = useState(\"Session\");\n  let timerInterval = useRef(null);\n  const audioBeep = useRef();\n\n  useEffect(() => {\n    if (time <= 0) {\n      audioBeep.current.play();\n      if (sessionType == \"Session\") {\n        setSessionType(\"Break\");\n        setTime(breakLength * 60);\n      } else if (sessionType == \"Break\") {\n        setSessionType(\"Session\");\n        setTime(workLength * 60);\n      }\n    }\n  }, [time]);\n\n  function setWork(e) {\n    let targetID = e.currentTarget.id;\n    if (targetID == \"session-decrement\") {\n      if (workLength > 1 && !timerInterval.current) {\n        if (sessionType == \"Session\") {\n          setTime((workLength - 1) * 60);\n        }\n        setWorkLength(workLength - 1);\n      }\n    } else if (targetID == \"session-increment\") {\n      if (workLength < 60 && !timerInterval.current) {\n        if (sessionType == \"Session\") {\n          setTime((workLength + 1) * 60);\n        }\n        setWorkLength(workLength + 1);\n      }\n    }\n  }\n\n  function setBreak(e) {\n    let targetID = e.currentTarget.id;\n    if (targetID == \"break-decrement\") {\n      if (breakLength > 1 && !timerInterval.current) {\n        if (sessionType == \"Break\") {\n          setTime((breakLength - 1) * 60);\n        }\n        setBreakLength(breakLength - 1);\n      }\n    } else if (targetID == \"break-increment\") {\n      if (breakLength < 60 && !timerInterval.current) {\n        if (sessionType == \"Break\") {\n          setTime((breakLength + 1) * 60);\n        }\n        setBreakLength(breakLength + 1);\n      }\n    }\n  }\n\n  function startTimer() {\n    //console.log(timerInterval);\n    if (timerInterval.current) {\n      clearInterval(timerInterval.current);\n      timerInterval.current = null;\n    } else {\n      timerInterval.current = setInterval(() => {\n        setTime((time) => time - 1);\n      }, 1000);\n    }\n  }\n\n  function reset() {\n    audioBeep.current.pause();\n    audioBeep.current.currentTime = 0;\n    setSessionType(\"Session\");\n    setBreakLength(5);\n    setWorkLength(25);\n    setTime(1500);\n    if (timerInterval.current) {\n      clearInterval(timerInterval.current);\n      timerInterval.current = null;\n    }\n  }\n\n  return (\n    <div className=\"vert\">\n      <h2>Pomodoro Clock</h2>\n      <div className=\"container\">\n        <div className=\"spread-horizontal\">\n          <TimerControl\n            label=\"break-label\"\n            length=\"break-length\"\n            increment=\"break-increment\"\n            decrement=\"break-decrement\"\n            setState={setBreak}\n            time={breakLength}\n          />\n          <TimerControl\n            label=\"session-label\"\n            length=\"session-length\"\n            increment=\"session-increment\"\n            decrement=\"session-decrement\"\n            setState={setWork}\n            time={workLength}\n          />\n        </div>\n        <div id=\"timer\">\n          <div id=\"display\">\n            <p id=\"timer-label\">{sessionType}</p>\n            <p id=\"time-left\">{secondsToTime(time)}</p>\n          </div>\n          <div id=\"controls\">\n            <div id=\"start_stop\" onClick={() => startTimer()}>\n              <button className=\"timer\">\n                <FaPause />\n                <FaPlay />\n              </button>\n            </div>\n            <div id=\"reset\" onClick={() => reset()}>\n              <button className=\"timer\">\n                <FaSyncAlt />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        ref={audioBeep}\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}